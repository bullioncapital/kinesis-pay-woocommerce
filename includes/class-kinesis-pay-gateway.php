<?php

// namespace KinesisPayGateway;

// Prevent public user to directly access .php files through URL
defined('ABSPATH') || exit;

/**
 * Kinesis Pay Gateway.
 *
 * Provides a Kinesis Pay Payment Gateway.
 *
 * @class       Kinesis_Pay_Gateway
 * @extends     WC_Payment_Gateway
 * @version     1.0.4
 */
class Kinesis_Pay_Gateway extends WC_Payment_Gateway
{
  const PAYMENT_METHOD_ID = 'kinesis-pay';

  /**
   * test mode
   *
   * @var boolean
   */
  protected $testmode;

  /**
   * Kinesis Pay merchant id
   *
   * @var string
   */
  protected $merchant_id;

  /**
   * Private key
   *
   * @var string
   */
  protected $private_key;

  /**
   * Public key
   *
   * @var string
   */
  protected $publishable_key;

  /**
   * Constructor for the gateway.
   */
  public function __construct()
  {
    $this->id = self::PAYMENT_METHOD_ID; // payment gateway plugin ID

    // Method with all the options fields
    $this->init_form_fields();

    // Load the settings.
    $this->init_settings();

    // This action hook saves the settings
    add_action('woocommerce_update_options_payment_gateways_' . $this->id, array($this, 'process_admin_options'));

    // We need custom JavaScript to obtain a token
    add_action('wp_enqueue_scripts', array($this, 'payment_scripts'));
  }

  /**
   * Initialise Gateway Settings Form Fields.
   */
  public function init_form_fields()
  {
    $this->form_fields = array(
      'enabled' => array(
        'title' => 'Enable/Disable',
        'label' => 'Enable Kinesis Pay Gateway',
        'type' => 'checkbox',
        'description' => '',
        'default' => 'no'
      ),
      'merchant_id' => array(
        'title' => 'A merchant id generated by kinesis',
        'type' => 'text'
      ),
      'publishable_key' => array(
        'title' => 'Live Publishable Key',
        'type' => 'text'
      ),
      'private_key' => array(
        'title' => 'Live Private Key',
        'type' => 'password'
      )
    );
  }

  public function init_settings()
  {
    parent::init_settings();

    global $test_mode;
    $this->title = 'Kinesis Pay';
    $this->description = 'Pay with Gold or Silver using Kinesis Pay';
    $this->testmode = 'yes' === $test_mode;
    $this->merchant_id = $this->get_option('merchant_id');
    $this->private_key = $this->testmode ? $this->get_option('test_private_key') : $this->get_option('private_key');
    $this->publishable_key = $this->testmode ? $this->get_option('test_publishable_key') : $this->get_option('publishable_key');
  }

  public function payment_scripts()
  {
    // we need JavaScript to process a token only on cart/checkout pages, right?
    if (!is_cart() && !is_checkout() && !isset($_GET['pay_for_order'])) {
      return;
    }

    // if our payment gateway is disabled, we do not have to enqueue JS too
    if ('no' === $this->enabled) {
      return;
    }

    // no reason to enqueue JavaScript if API keys are not set
    if (empty($this->private_key) || empty($this->publishable_key)) {
      return;
    }

    // do not work with card details without SSL unless your website is in a test mode
    if (!$this->testmode && !is_ssl()) {
      return;
    }

    // in most payment processors you have to use PUBLIC KEY to obtain a token
    wp_localize_script(
      'woocommerce_kinesis_pay',
      'kinesis_params',
      array(
        'publishableKey' => $this->publishable_key
      )
    );
  }

  public function payment_fields()
  {
    if ($this->description) {
      if ($this->testmode) {
        $this->description .= ' *** TEST MODE ENABLED ***';
        $this->description = trim($this->description);
      }
      echo wpautop(wp_kses_post($this->description));
    }

    do_action('woocommerce_credit_card_form_start', $this->id);
    do_action('woocommerce_credit_card_form_end', $this->id);
  }

  protected function update_payment_status($order_id, $payment_id, $payment_status)
  {
    global $wpdb;
    $tablename = $wpdb->prefix . 'kinesis_payments';

    $result = $wpdb->get_results($wpdb->prepare(
      "SELECT * FROM $tablename WHERE `order_id` = %d AND `payment_id` = %s ORDER BY `id` DESC",
      array($order_id, $payment_id)
    ));
    $hasRecord = !!count($result);
    if (!$hasRecord) {
      $wpdb->query(
        $wpdb->prepare(
          "INSERT INTO $tablename
          ( order_id, payment_id, payment_status, created_at )
          VALUES ( %d, %s, %s, UTC_TIMESTAMP() )",
          $order_id,
          $payment_id,
          'pending'
        )
      );
    } else if ($result[0]->payment_status !== $payment_status) {
      $kpay_id = $result[0]->id;
      $wpdb->query(
        $wpdb->prepare(
          "UPDATE $tablename
          SET `payment_status`= %s, updated_at = UTC_TIMESTAMP()
          WHERE `id` = $kpay_id",
          array($payment_status)
        )
      );
    }
  }

  /**
   * Process the payment and return the result.
   *
   * @param int $order_id Order ID.
   * @return array
   */
  public function process_payment($order_id)
  {
    $payment_id = $_POST['kpay-payment-id'];

    $payment_status_ok = false;
    $response = request_payment_status($payment_id);
    $payment_status_ok = isset($response->status) && $response->status === 'processed';

    if (!$payment_status_ok) {
      throw new Exception(__('Incorrect payment status.', 'kinesis-pay-gateway'));
    }
    $this->update_payment_status($order_id, $payment_id, 'processed');

    $payment_approved = false;
    $response = request_approve_payment($payment_id, $order_id);
    $payment_approved = isset($response->status) && $response->status === 'processed';

    if (!$payment_approved) {
      return array(
        'result' => 'error',
        'redirect' => 'kpay-payment-error'
      );
    }
    $this->update_payment_status($order_id, $payment_id, 'confirmed');

    global $woocommerce;
    $order = wc_get_order($order_id);

    if ($order->get_total() <= 0) {
      wc_add_notice('Connection error.', 'error');
      return array('result' => 'failure');
    }

    $order->payment_complete();
    $order->add_order_note('Thank you for paying with kinesis-pay', true);
    $woocommerce->cart->empty_cart();

    return array(
      'result' => 'success',
      'redirect' => $this->get_return_url($order)
    );
  }
}
